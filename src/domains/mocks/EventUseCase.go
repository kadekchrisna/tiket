// Code generated by mockery v2.2.1. DO NOT EDIT.

package mocks

import (
	domains "tiket.vip/src/domains"
	configs "tiket.vip/src/infrastructures/configs"

	mock "github.com/stretchr/testify/mock"
)

// EventUseCase is an autogenerated mock type for the EventUseCase type
type EventUseCase struct {
	mock.Mock
}

// CreateEvent provides a mock function with given fields: _a0
func (_m *EventUseCase) CreateEvent(_a0 domains.Event) (*configs.ResponseSuccess, *configs.ResponseError) {
	ret := _m.Called(_a0)

	var r0 *configs.ResponseSuccess
	if rf, ok := ret.Get(0).(func(domains.Event) *configs.ResponseSuccess); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configs.ResponseSuccess)
		}
	}

	var r1 *configs.ResponseError
	if rf, ok := ret.Get(1).(func(domains.Event) *configs.ResponseError); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*configs.ResponseError)
		}
	}

	return r0, r1
}

// DeleteEvent provides a mock function with given fields: _a0
func (_m *EventUseCase) DeleteEvent(_a0 interface{}) (*configs.ResponseSuccess, *configs.ResponseError) {
	ret := _m.Called(_a0)

	var r0 *configs.ResponseSuccess
	if rf, ok := ret.Get(0).(func(interface{}) *configs.ResponseSuccess); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configs.ResponseSuccess)
		}
	}

	var r1 *configs.ResponseError
	if rf, ok := ret.Get(1).(func(interface{}) *configs.ResponseError); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*configs.ResponseError)
		}
	}

	return r0, r1
}

// GetAllEvents provides a mock function with given fields:
func (_m *EventUseCase) GetAllEvents() (*configs.ResponseSuccess, *configs.ResponseError) {
	ret := _m.Called()

	var r0 *configs.ResponseSuccess
	if rf, ok := ret.Get(0).(func() *configs.ResponseSuccess); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configs.ResponseSuccess)
		}
	}

	var r1 *configs.ResponseError
	if rf, ok := ret.Get(1).(func() *configs.ResponseError); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*configs.ResponseError)
		}
	}

	return r0, r1
}

// GetAllEventsPaginate provides a mock function with given fields: _a0
func (_m *EventUseCase) GetAllEventsPaginate(_a0 domains.EventPagi) (*configs.ResponseSuccess, *configs.ResponseError) {
	ret := _m.Called(_a0)

	var r0 *configs.ResponseSuccess
	if rf, ok := ret.Get(0).(func(domains.EventPagi) *configs.ResponseSuccess); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configs.ResponseSuccess)
		}
	}

	var r1 *configs.ResponseError
	if rf, ok := ret.Get(1).(func(domains.EventPagi) *configs.ResponseError); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*configs.ResponseError)
		}
	}

	return r0, r1
}

// GetEvent provides a mock function with given fields: _a0
func (_m *EventUseCase) GetEvent(_a0 interface{}) (*configs.ResponseSuccess, *configs.ResponseError) {
	ret := _m.Called(_a0)

	var r0 *configs.ResponseSuccess
	if rf, ok := ret.Get(0).(func(interface{}) *configs.ResponseSuccess); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configs.ResponseSuccess)
		}
	}

	var r1 *configs.ResponseError
	if rf, ok := ret.Get(1).(func(interface{}) *configs.ResponseError); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*configs.ResponseError)
		}
	}

	return r0, r1
}

// UpdateEvent provides a mock function with given fields: _a0
func (_m *EventUseCase) UpdateEvent(_a0 domains.Event) (*configs.ResponseSuccess, *configs.ResponseError) {
	ret := _m.Called(_a0)

	var r0 *configs.ResponseSuccess
	if rf, ok := ret.Get(0).(func(domains.Event) *configs.ResponseSuccess); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configs.ResponseSuccess)
		}
	}

	var r1 *configs.ResponseError
	if rf, ok := ret.Get(1).(func(domains.Event) *configs.ResponseError); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*configs.ResponseError)
		}
	}

	return r0, r1
}
